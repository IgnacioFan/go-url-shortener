// Code generated by mockery v2.16.0. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// ShortUrlRepository is an autogenerated mock type for the ShortUrlRepository type
type ShortUrlRepository struct {
	mock.Mock
}

// Create provides a mock function with given fields: url
func (_m *ShortUrlRepository) Create(url string) (uint64, error) {
	ret := _m.Called(url)

	var r0 uint64
	if rf, ok := ret.Get(0).(func(string) uint64); ok {
		r0 = rf(url)
	} else {
		r0 = ret.Get(0).(uint64)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(url)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: id
func (_m *ShortUrlRepository) Delete(id uint64) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(uint64) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Find provides a mock function with given fields: id
func (_m *ShortUrlRepository) Find(id uint64) (string, error) {
	ret := _m.Called(id)

	var r0 string
	if rf, ok := ret.Get(0).(func(uint64) string); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint64) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindBy provides a mock function with given fields: url
func (_m *ShortUrlRepository) FindBy(url string) (uint64, error) {
	ret := _m.Called(url)

	var r0 uint64
	if rf, ok := ret.Get(0).(func(string) uint64); ok {
		r0 = rf(url)
	} else {
		r0 = ret.Get(0).(uint64)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(url)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewShortUrlRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewShortUrlRepository creates a new instance of ShortUrlRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewShortUrlRepository(t mockConstructorTestingTNewShortUrlRepository) *ShortUrlRepository {
	mock := &ShortUrlRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
