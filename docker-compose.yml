version: "3.8"

services:
  # db:
  #   image: postgres:alpine
  #   container_name: ${POSTGRES_HOST}
  #   env_file:
  #     - .env
  #   ports:
  #     - ${POSTGRES_PORT}:5432
  #   healthcheck:
  #     test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -h ${POSTGRES_HOST} -p ${POSTGRES_PORT}"]
  #     interval: 10s
  #     timeout: 5s
  #     retries: 2
  #   volumes:
  #     - go-url-shortener-db:/var/lib/postgresql/data
  #   networks:
  #     - go-url-shortener.network

  master:
    image: bitnami/postgresql:11
    container_name: master
    ports:
      - ${POSTGRES_PORT}:5432
    environment:
      - POSTGRESQL_REPLICATION_MODE=master
      - POSTGRESQL_REPLICATION_USER=replication_user
      - POSTGRESQL_REPLICATION_PASSWORD=replication_password
      - POSTGRESQL_USERNAME=database_user
      - POSTGRESQL_PASSWORD=database_password
      - POSTGRESQL_DATABASE=${POSTGRES_DB}
      # Only the superuser "postgres" can execute "CREATE EXTENSION IF NOT EXISTS "pgcrypto";" if needed for having UUIDs
      # Superuser needs a password set here
      - POSTGRESQL_POSTGRES_PASSWORD=${POSTGRES_USER}
      # To see direct actions on the database while examining read and write behavior:
      # - POSTGRESQL_PGAUDIT_LOG=READ,WRITE
      # - POSTGRESQL_SYNCHRONOUS_COMMIT_MODE=remote_apply # Safest method for data consistency
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -h master -p ${POSTGRES_PORT}"]
      interval: 10s
      timeout: 5s
      retries: 4
    networks:
      - go-url-shortener.network

  slave:
    image: bitnami/postgresql:11
    ports:
      - 5432
    environment:
      - POSTGRESQL_REPLICATION_MODE=slave
      - POSTGRESQL_REPLICATION_USER=replication_user
      - POSTGRESQL_REPLICATION_PASSWORD=replication_password
      - POSTGRESQL_MASTER_HOST=master
      - POSTGRESQL_PASSWORD=database_password
      - POSTGRESQL_MASTER_PORT_NUMBER=${POSTGRES_PORT}
    deploy:
      replicas: 2
    depends_on:
      - master
    networks:
      - go-url-shortener.network

  app:
    build:
      context: .
      dockerfile: build/Dockerfile
    restart: always
    env_file:
      - .env
    ports:
      - 3000
    depends_on:
      master:
        condition: service_healthy
    networks:
      - go-url-shortener.network
    deploy:
      replicas: 2
    command: "./app server"

  redis:
    image: redis
    container_name: ${REDIS_HOST}
    env_file:
      - .env
    ports:
      - ${REDIS_PORT}:6379
    networks:
      - go-url-shortener.network

  nginx:
    image: nginx:latest
    volumes:
      - ./deployment/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
    ports:
      - "80:80"
    depends_on:
      - app
    networks:
      - go-url-shortener.network

networks:
  go-url-shortener.network:
