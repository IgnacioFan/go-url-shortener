version: "3.8"

services:
  db:
    image: postgres:alpine
    container_name: ${POSTGRES_HOST}
    env_file:
      - .env
    ports:
      - ${POSTGRES_PORT}:5432
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "pg_isready -U ${POSTGRES_USER} -h ${POSTGRES_HOST} -p ${POSTGRES_PORT}",
        ]
      interval: 10s
      timeout: 5s
      retries: 2
    volumes:
      - go-url-shortener-db:/var/lib/postgresql/data
    networks:
      - go-url-shortener.network

  api:
    build:
      context: .
      dockerfile: dockerconfig/app/Dockerfile
    env_file:
      - .env
    depends_on:
      db:
        condition: service_healthy
    networks:
      - go-url-shortener.network
    deploy:
      replicas: 2

  web:
    build:
      context: ./front
      dockerfile: Dockerfile
    container_name: web
    ports:
      - 80:80
    depends_on:
      - api
    networks:
      - go-url-shortener.network

  redis:
    build:
      context: .
      dockerfile: dockerconfig/redis/Dockerfile
    container_name: ${REDIS_HOST}
    env_file:
      - .env
    ports:
      - ${REDIS_PORT}:6379
    networks:
      - go-url-shortener.network
  
  zookeeper:
    build:
      context: .
      dockerfile: dockerconfig/zookeeper/Dockerfile
    container_name: ${ZOOKEEPER_HOST}
    ports:
      - "2181:2181"
    env_file:
      - .env
    networks:
      - go-url-shortener.network

  # nginx:
  #   image: nginx:latest
  #   volumes:
  #     - ./dockerconfig/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
  #   ports:
  #     - "80:80"
  #   depends_on:
  #     - app
  #   networks:
  #     - go-url-shortener.network

volumes:
  go-url-shortener-db:

networks:
  go-url-shortener.network:
    driver: bridge
